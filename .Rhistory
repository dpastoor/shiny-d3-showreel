xyplot(coskew~date,groups=account,data=skew.coskew.melt,col=mycolors,
type="l",
par.settings=theEconomist.theme(box="transparent"),
lattice.options=theEconomist.opts(),
scales=list(y=list(alternating=3)),
ylab=NULL,
auto.key=list(space="right",col=mycolors,points=FALSE,lines=FALSE),
main="Coskewness (Rolling 12-month) with S&P 500")
########################################################################################
table.Drawdowns(perf[,1])
drawdowns <- Drawdowns(perf[,c(2,3,1)])
drawdowns.df <- as.data.frame(cbind(index(drawdowns),coredata(drawdowns)),stringsAsFactors=FALSE)
drawdowns.melt <- melt(drawdowns.df,id.vars=1)
colnames(drawdowns.melt) <- c("date","index","drawdown")
drawdowns.melt[,1] <- as.Date(drawdowns.melt[,1])
#ylimits<-c(pretty(c(min(drawdowns.melt$drawdown),
#                                  max(drawdowns.melt$drawdown))),0.05,as.numeric(round(last(drawdowns)[,order(last(drawdowns.melt))],4)))
#ylabels<-c(ylimits[1:(length(ylimits)-3)],colnames(drawdowns)[order(last(drawdowns))])
reorder(drawdowns.melt[,2],as.character(drawdowns.melt[,2]))
#p5<-
xyplot(drawdown~date,groups=index,data=drawdowns.melt,
type="l",lwd=c(2.5,2.5,4),# col=mycolors,
#         auto.key=list(corner=c(1,0.5),col=mycolors,points=FALSE),
axis=function (side = c("top", "bottom", "left", "right"), scales,
components, ..., labels = c("default", "yes", "no"), ticks = c("ye",
"yes", "no"), line.col){
side <- match.arg(side)
labels <- match.arg(labels)
ticks <- match.arg(ticks)
axis.text <- trellis.par.get("axis.text")
print(side)
print(components)
if(side == "top") return()
if(side %in% c("bottom","left")){
axis.default(side, scales = scales, components = components,
..., labels = labels, ticks = ticks, line.col = axis.text$col)
}
if (side == "right") {
comp.list <- components[["left"]]
panel.refline(h = comp.list$ticks$at)
lims <- current.panel.limits()
panel.abline(h = lims$y[1], col = axis.text$col)
}
},
par.settings=theEconomist.theme(box="transparent"),
lattice.options=theEconomist.opts(),
scales=list(x=list(alternating=1,at=index(perf)[endpoints(drawdowns,"years")],
labels=format(index(perf)[endpoints(drawdowns,"years")],"%Y"),
limits=c(index(perf)[1],index(last(perf))+250)),
y=list(alternating=1,limits=c(-0.6,0.05))),#,at=ylimits,labels=ylabels)),
xlab=NULL,
ylab=NULL,
main="Drawdowns Since Inception")
p5<-direct.label(p5,"last.qp")
#print(p5,position=c(0,0.73,1,1),more=TRUE)
#print(p4,position=c(0,0,1,0.76))
#side by side
#print(p5,position=c(0,0.015,0.5,1),more=TRUE)
#print(p4,position=c(0.5,0.015,1,1))
############print correlation, skew, and coskew
#print(p6,position=c(0,0.66,1,1),more=TRUE)
#print(p7,position=c(0,0.33,1,0.66),more=TRUE)
#print(p8,position=c(0,0,1,0.33))
###############################################
print(p5,position=c(0,0.73,1,1),more=TRUE)
print(p4,position=c(0,0,1,0.76))
print(p5,position=c(0,0.73,1,1),more=TRUE)
p5<-
xyplot(drawdown~date,groups=index,data=drawdowns.melt,
type="l",lwd=c(2.5,2.5,4),# col=mycolors,
#         auto.key=list(corner=c(1,0.5),col=mycolors,points=FALSE),
axis=function (side = c("top", "bottom", "left", "right"), scales,
components, ..., labels = c("default", "yes", "no"), ticks = c("ye",
"yes", "no"), line.col){
side <- match.arg(side)
labels <- match.arg(labels)
ticks <- match.arg(ticks)
axis.text <- trellis.par.get("axis.text")
print(side)
print(components)
if(side == "top") return()
if(side %in% c("bottom","left")){
axis.default(side, scales = scales, components = components,
..., labels = labels, ticks = ticks, line.col = axis.text$col)
}
if (side == "right") {
comp.list <- components[["left"]]
panel.refline(h = comp.list$ticks$at)
lims <- current.panel.limits()
panel.abline(h = lims$y[1], col = axis.text$col)
}
},
par.settings=theEconomist.theme(box="transparent"),
lattice.options=theEconomist.opts(),
scales=list(x=list(alternating=1,at=index(perf)[endpoints(drawdowns,"years")],
labels=format(index(perf)[endpoints(drawdowns,"years")],"%Y"),
limits=c(index(perf)[1],index(last(perf))+250)),
y=list(alternating=1,limits=c(-0.6,0.05))),#,at=ylimits,labels=ylabels)),
xlab=NULL,
ylab=NULL,
main="Drawdowns Since Inception")
p5<-direct.label(p5,"last.qp")
#this bit of code will show a system after significant
#optimization and hindsight bias
#without any out-of-sample testing
#explore how SP500 behaves in different ranges of Financial Conditions
#see previous posts for more discussion
require(quantmod)
require(PerformanceAnalytics)
require(ggplot2)
#get data from St. Louis Federal Reserve (FRED)
getSymbols("SP500",src="FRED") #load SP500
getSymbols("ANFCI",src="FRED") #load Adjusted Chicago Financial
getSymbols("CFNAI",src="FRED") #load Chicago National Activity
#do not use this but here in case you want to play
getSymbols("PANDI",src="FRED") #load Chicago Fed Production and Income
#do a little manipulation to get the data lined up on weekly basis
SP500  <-  to.monthly(SP500)[,4]
ANFCI <- to.monthly(ANFCI)[,4]
CFNAI <- to.monthly(CFNAI)[,4]
PANDI <- to.monthly(PANDI)[,4]
index(SP500) <- as.Date(index(SP500))
index(ANFCI) <- as.Date(index(ANFCI))
index(CFNAI) <- as.Date(index(CFNAI))
index(PANDI) <- as.Date(index(PANDI))
SP500_ANFCI <- na.omit(merge(ROC(SP500,n=1,type="discrete"),
ANFCI,CFNAI,PANDI))
#and just for fun an enhanced very basic system
signal <- runSum(-0.25*SP500_ANFCI[,2]-SP500_ANFCI[,3],n=4)
chartSeries(signal, name="Chicago Fed Signal")
signal <- lag(signal,k=1)
#go long if extremely negative (signal>10)
#or good but not too good (signal between -.25 and -2)
ret <- ifelse(signal>10 | (signal <= -0.25  & signal > -2.25) , 1, 0) * SP500_ANFCI[,1]
ret <- merge(ret, SP500_ANFCI[,1])
colnames(ret) <- c("ChicagoFed_LongOnlySystem","SP500")
charts.PerformanceSummary(ret, ylog=TRUE, main="Over-optimized Chicago Fed S&P 500 System",
colorset=c("cadetblue","darkolivegreen3"))
#I really like the boxplot by range, so let's do the same here
df <- na.omit(merge(round(signal,0),ROC(SP500,n=1,type="discrete")))
df <- as.data.frame(cbind(index(df),
coredata(df)))
colnames(df) <- c("date","ChiFedSignal","SP500return")
ggplot(df,aes(factor(ChiFedSignal),SP500return)) +
geom_boxplot(aes(colour = factor(ChiFedSignal))) +
opts(title="Box Plot of SP500 Monthly Change by Chicago Fed Signal")
#play with turbulence from 5-27 article
assetsChicago <- na.omit(merge(round(lag(ANFCI),0),round(lag(CFNAI),0),round(lag(PANDI),0),
signals_returns[,c(1,3:6)]
))
dfCh <- as.data.frame(cbind(index(assetsChicago),
coredata(assetsChicago)))
dfCh_melt <- melt(dfCh, id=1:5)
colnames(dfCh_melt) <- c("date","ANFCI","CFNAI","PANDI","turbulence","asset","return")
ggplot(dfCh_melt,aes(factor(ANFCI),return)) +
geom_boxplot(aes(colour = factor(asset))) +
opts(plot_title="Box Plot of SP500 Monthly Change by Financial Turbulence")
install.packages(c("acepack", "ape", "arules", "bitops", "boot", "Cairo", "car", "chron", "class", "classInt", "clue", "cluster", "coda", "colorspace", "date", "Deducer", "deldir", "descr", "digest", "directlabels", "doBy", "effects", "eRm", "evaluate", "FactoMineR", "fExoticOptions", "fExtremes", "fields", "fMultivar", "fOptions", "forecast", "foreign", "formatR", "fracdiff", "fTrading", "ggm", "gRbase", "gWidgets", "gWidgetstcltk", "HH", "Hmisc", "httr", "igraph", "igraph0", "inline", "ipred", "kernlab", "lavaan", "lessR", "linprog", "maptools", "MASS", "mathgraph", "Matrix", "mboost", "mgcv", "mondate", "MPV", "multcomp", "mvtnorm", "networkDynamic", "nlme", "nnet", "numDeriv", "odfWeave", "parser", "party", "PBSmapping", "polspline", "RandomFields", "randomForest", "RANN", "raster", "Rcmdr", "RcmdrPlugin.coin", "RcmdrPlugin.qual", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "rgdal", "rgeos", "rgl", "RGtk2Extras", "rjson", "RJSONIO", "rms", "rpart", "RQuantLib", "rugarch", "RWeka", "RWekajars", "seriation", "sets", "sfsmisc", "shiny", "slam", "sp", "spatial", "spatstat", "spc", "spdep", "stabledist", "statmod", "sudoku", "survey", "systemfit", "timeDate", "tripack", "TSA", "tseries", "tweedie", "VIM", "websockets", "WriteXLS", "XLConnect", "XML", "xts", "Zelig", "zoo"))
getSymbols
require(latticeExtra)
require(ggplot2)
require(quantmod)
require(PerformanceAnalytics)
getSymbols
tckrs <- c("CSCO","MSFT","AAPL","^GSPC")
getSymbols(tckrs,from="1990-01-01")
prices <- na.omit(merge(CSCO[,6],MSFT[,6],AAPL[,6],GSPC[,6]))
head(prices)
plot.xts(prices)
plot.zoo(prices,screens=1)
plot.zoo(prices,screens=1,log="y")
returns <- prices/lag(prices) - 1
plot.zoo(returns)
cumul <- cumprod(returns+1)
plot.zoo(cumul)
returns[1,] <- 0
cumul <- cumprod(returns+1)
plot.zoo(cumul)
colnames(prices) <- c("Cisco","Microsoft","Apple","SP500")
returns <- prices/lag(prices) - 1
returns[1,] <- 0
cumul <- cumprod(returns+1)
plot.zoo(cumul)
plot.zoo(cumul,screens=1)
plot.zoo(cumul,screens=1,log="y")
xyplot(cumul)
xyplot(cumul,screens=1)
astheEconomist(xyplot(cumul,screens=1))
asTheEconomist(xyplot(cumul,screens=1))
cumul.df <- as.data.frame(cbind(index(cumul),coredata(cumul.df)))
cumul.df <- as.data.frame(cbind(index(cumul),coredata(cumul)))
head(cumul.df)
prices <- na.omit(merge(CSCO[,6],MSFT[,6],AAPL[,6],GSPC[,6]))
colnames(prices) <- c("Cisco","Microsoft","Apple","SP500")
returns <- prices/lag(prices) - 1
returns[1,] <- 0
head(returns)
prices <- na.omit(merge(CSCO[,6],MSFT[,6],AAPL[,6],GSPC[,6]))
head(prices)
prices <- na.omit(merge(CSCO[,6],MSFT[,6],AAPL[,6],GSPC[,6]))
colnames(prices) <- c("Cisco","Microsoft","Apple","SP500")
returns <- prices/lag(prices) - 1
returns[1,] <- 0
cumul <- cumprod(returns+1)
cumul.df <- as.data.frame(cbind(index(cumul),coredata(cumul)))
head(cumul.df)
require(reshape2)
cumul.melt <- melt(cumul.df,id.vars=1)
head(cumul.melt)
colnames(cumul.melt) <- c("Date","Stock","Cumul")
cumul.melt[,"Date"] <- as.Date(cumul.melt[,"Date"])
help(ggplot)
cumul.melt[,"Date"] <- as.Date(cumul.melt[,"Date"])
cumul.melt[,"Date"] <- as.Date(cumul.melt[,"Date"])
ggplot(cumul.melt) + geom_line(aes(x=Date,y=Cumul,colour=Stock))
ggplot(cumul.melt) + geom_line(aes(x=Date,y=log(Cumul),colour=Stock))
library("devtools")
install.packages("devtools")
install_github("ggthemes","jrnold")
require("ggthemes")
install.packages("Rtools")
install_github
install_url
install_url_single
mapply
require("devtools")
require(devtools)
install_github('ggthemes','jrnold')
require(Rtools)
install_packages
install_package
install
install.packages("C:/Users/Kent.TLEAVELL_NT/AppData/Local/Temp/RtmpW2xXut/jrnold-ggthemes-15aad9c/jrnold-ggthemes-15aad9c.zip", repos = NULL)
install.packages("C:/Users/Kent.TLEAVELL_NT/AppData/Local/Temp/RtmpW2xXut/jrnold-ggthemes-15aad9c/jrnold-ggthemes-15aad9c.zip", repos = NULL)
install.packages("C:/Users/Kent.TLEAVELL_NT/Downloads/jrnold-ggthemes-15aad9c.zip", repos = NULL)
require(ggthemes)
require(jrnold-ggthemes-15aad9c)
require("jrnold-ggthemes-15aad9c")
require(ggthemes)
install.packages("C:/Users/Kent.TLEAVELL_NT/Downloads/ggthemes.zip", repos = NULL)
install.packages("C:\Users\Kent.TLEAVELL_NT\Downloads\ggthemes_1.1.0.tar.gz")
install.packages("C:\\Users\\Kent.TLEAVELL_NT\\Downloads\\ggthemes_1.1.0.tar.gz")
install_github("ggthemes","jrnold")
require("ggthemes")
require(shiny)
json
jsonif
jsonify
install.packages('shiny', repos=c('http://rstudio.org/_packages', 'http://cran.rstudio.com'))
require(shiny)
runExample("10_download")
runExample
runApp
startApp
shiny::startApp
JSON
??json
load(rock)
data(rock)
toJSON(rock)
RJSONIO
toJSON
require(shiny)
toJSON
??shiny
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-sandbox-master")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-sandbox-master\\")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-sandbox-master\\myapp")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-sandbox-master\\grn")
install.packages("ENA")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-sandbox-master\\grn")
install.packages("GeneNet")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-sandbox-master\\grn")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-sandbox-master\\grn")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
require(shiny)
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
?read
??read
?read.csv
readLines("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot\\www\\perf-json.json,n=-1")
readLines("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot\\www\\perf-json.json",n=-1)
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
require(RJSONIO)
help(RJSONIO)
??RJSONIO
??json
toJSON(readLines("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot\\www\\perf-json.json",n=-1))
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
require(shiny)
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
require(shiny)
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
require(shiny)
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
require(shiny)
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot\\d3-shiny-plot")
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-plot\\d3-shiny-plot")
library(quantmod)
library(TTR)
library(PerformanceAnalytics)
tckr<-"^GSPC"
start<-"1950-01-01"
end<- format(Sys.Date(),"%Y-%m-%d") # yyyy-mm-dd
# Pull tckr index data from Yahoo! Finance
getSymbols(tckr, from=start, to=end)
GSPC<-adjustOHLC(GSPC,use.Adjusted=T)
GSPC<-to.weekly(GSPC)
GSPC.cl<-GSPC[,4]
GSPC.H<-GSPC[,2]
GSPC.L<-GSPC[,3]
adx<-ADX(GSPC[,c(2,3,4)],n=15)
rsi<-round(RSI(GSPC.cl,n=15),-1)
corr<-runCor(GSPC.cl,lag(GSPC.cl,1),n=15)
signal<-round(adx[,2]*(rsi-60)*corr,digits=-1)
# Create the long (up) and short (dn) signals
sigup <- ifelse(signal>=0,1,0)
# Lag signals to align with days in market,
# not days signals were generated
sigup <- lag(sigup,1) # Note k=1 implies a move *forward*
# Replace missing signals with no position
# (generally just at beginning of series)
sigup[is.na(sigup)] <- 0
#Calculate Close-to-Close returns
ret <- GSPC[,6]/lag(GSPC[,6])-1
ret[1] <- 0
#Calculate equity curves
eq_up <- cumprod(1+ret*sigup)
plot(log(eq_up))
systemmonth<-to.monthly(eq_up)
indexmonth<-to.monthly(GSPC)
indexperf<-monthlyReturn(indexmonth)
systemperf<-monthlyReturn(systemmonth)
mergeperf<-merge(indexperf,systemperf)
index(mergeperf) <- as.Date(index(mergeperf))
charts.PerformanceSummary(mergeperf,ylog=TRUE)
table.DownsideRisk(mergeperf)
systemdayperf<-dailyReturn(to.daily(eq_up))
table.Drawdowns(systemdayperf)
chartSeries(eq_up*coredata(GSPC)[1,4],TA="addTA(GSPC,on=1);addTA(signal)",log=T)
require(quantmod)
require(TTR)
require(PerformanceAnalytics)
tckr<-"^GSPC"
start<-"1919-01-01"
end<- format(Sys.Date(),"%Y-%m-%d") # yyyy-mm-dd
# Pull tckr index data from Yahoo! Finance
getSymbols(tckr, from=start, to=end)
GSPC<-adjustOHLC(GSPC,use.Adjusted=T)
GSPC<-to.weekly(GSPC)
GSPC.cl<-GSPC[,4]
GSPC.H<-GSPC[,2]
GSPC.L<-GSPC[,3]
spreturn<-weeklyReturn(GSPC)
#chart.VaRSensitivity(spreturn, methods=c("HistoricalVaR", "ModifiedVaR", "GaussianVaR"), colorset=bluefocus, lwd=2)
#chart.ECDF(spreturn["2000:2010"])
#chart.RollingPerformance(spreturn,FUN="KellyRatio",width=50)
signal<-apply.rolling(spreturn,FUN="KellyRatio",width=50)
signal2<-runCor(ROC(GSPC[,4],10)-1,signal,4)
chartSeries(GSPC,log=T,TA="addTA(signal)")
# Create the long (up) and short (dn) signals
#sigup <- ifelse(signal>2,2,ifelse(signal>=0,1,0))
# For some leverage
sigup <- ifelse(signal>8&signal2>0,3,ifelse(signal2<.8&signal>=2,2,ifelse(signal2> 0.2 & signal>=0,1,0)))
#sigup <- ifelse(signal<10,1,0)
# add these for some short potential; works well in GSPC and Emerging
#signal<-apply.rolling(spreturn,FUN="KellyRatio",width=10)
#signal2<-GSPC.cl-runMean(GSPC.cl,n=8)
#sigup <- ifelse(sigup>0,sigup,ifelse(signal < 0 & signal2 > 0,1,ifelse(signal < 0 & signal2 < 0, -1 ,ifelse(signal >= 0 & signal2 > 0.5 ,1,0))))
# Lag signals to align with days in market,
# not days signals were generated
sigup <- lag(sigup,1) # Note k=1 implies a move *forward*
# Replace missing signals with no position
# (generally just at beginning of series)
sigup[is.na(sigup)] <- 0
#Calculate Close-to-Close returns
ret <- GSPC[,6]/lag(GSPC[,6])-1
ret[1] <- 0
#Calculate equity curves
eq_up <- cumprod(1+1*ret*sigup)
plot(log(eq_up))
systemmonth<-to.weekly(eq_up)
indexmonth<-to.weekly(GSPC)
indexperf<-weeklyReturn(indexmonth)
systemperf<-weeklyReturn(systemmonth)
mergeperf<-merge(indexperf,systemperf)
charts.PerformanceSummary(mergeperf,ylog=TRUE)
#table.DownsideRisk(mergeperf)
#systemdayperf<-dailyReturn(to.daily(eq_up))
#table.Drawdowns(systemdayperf)
chartSeries(eq_up*coredata(GSPC)[50,4],log=T,TA="addTA(GSPC[,4],on=1);addTA(signal);addTA(sigup);addTA(signal2)")
library(quantmod)
library(TTR)
library(PerformanceAnalytics)
tckr<-"^GSPC"
start<-"1950-01-01"
end<- format(Sys.Date(),"%Y-%m-%d") # yyyy-mm-dd
# Pull tckr index data from Yahoo! Finance
getSymbols(tckr, from=start, to=end)
GSPC<-adjustOHLC(GSPC,use.Adjusted=T)
GSPC<-to.weekly(GSPC)
GSPC.cl<-GSPC[,4]
GSPC.H<-GSPC[,2]
GSPC.L<-GSPC[,3]
bollinger<-BBands(GSPC.cl,n=50)
bollinger[,3]<-(bollinger[,3]-bollinger[,1])/bollinger[,2]
bollinger[,4]<- .5 - bollinger[,4]
rsi<-RSI(GSPC.cl,n=50)/100
signal<-rsi[,1]*bollinger[,3]*bollinger[,4]
# Create the long (up) and short (dn) signals
sigup <- ifelse(signal<0.01&signal>-.125,1,0)
# Lag signals to align with days in market,
# not days signals were generated
sigup <- lag(sigup,1) # Note k=1 implies a move *forward*
# Replace missing signals with no position
# (generally just at beginning of series)
sigup[is.na(sigup)] <- 0
#Calculate Close-to-Close returns
ret <- ROC(GSPC[,6],type="discrete")
ret[1] <- 0
#Calculate equity curves
eq_up <- cumprod(1+1*ret*sigup)
plot(log(eq_up))
systemmonth<-to.monthly(eq_up)
indexmonth<-to.monthly(GSPC)
indexperf<-monthlyReturn(indexmonth)
systemperf<-monthlyReturn(systemmonth)
mergeperf<-merge(indexperf,systemperf)
index(mergeperf) <- as.Date(index(mergeperf))
charts.PerformanceSummary(mergeperf,ylog=TRUE)
table.DownsideRisk(mergeperf)
#systemdayperf<-dailyReturn(to.daily(eq_up))
#table.Drawdowns(systemdayperf)
chartSeries(eq_up*coredata(GSPC)[1,4],TA="addTA(GSPC,on=1);addTA(signal)",log=T)
library(quantmod)
library(TTR)
library(PerformanceAnalytics)
tckr<-"^RUT"
start<-"1950-01-01"
end<- format(Sys.Date(),"%Y-%m-%d") # yyyy-mm-dd
# Pull tckr index data from Yahoo! Finance
getSymbols(tckr, from=start, to=end)
RUT<-adjustOHLC(RUT,use.Adjusted=T)
RUT<-to.weekly(RUT)
RUT.cl<-RUT[,4]
RUT.H<-RUT[,2]
RUT.L<-RUT[,3]
bollinger<-BBands(RUT.cl,n=50)
bollinger[,3]<-(bollinger[,3]-bollinger[,1])/bollinger[,2]
bollinger[,4]<- .5 - bollinger[,4]
rsi<-RSI(RUT.cl,n=50)/100
signal<-rsi[,1]*bollinger[,3]*bollinger[,4]
# Create the long (up) and short (dn) signals
sigup <- ifelse(signal<0.01&signal>-.125,1,0)
# Lag signals to align with days in market,
# not days signals were generated
sigup <- lag(sigup,1) # Note k=1 implies a move *forward*
# Replace missing signals with no position
# (generally just at beginning of series)
sigup[is.na(sigup)] <- 0
#Calculate Close-to-Close returns
ret <- ROC(RUT[,6],type="discrete")
ret[1] <- 0
#Calculate equity curves
eq_up <- cumprod(1+1*ret*sigup)
plot(log(eq_up))
systemmonth<-to.monthly(eq_up)
indexmonth<-to.monthly(RUT)
indexperf<-monthlyReturn(indexmonth)
systemperf<-monthlyReturn(systemmonth)
mergeperf<-merge(indexperf,systemperf)
index(mergeperf) <- as.Date(index(mergeperf))
charts.PerformanceSummary(mergeperf,ylog=TRUE)
table.DownsideRisk(mergeperf)
#systemdayperf<-dailyReturn(to.daily(eq_up))
#table.Drawdowns(systemdayperf)
chartSeries(eq_up*coredata(RUT)[1,4],TA="addTA(RUT,on=1);addTA(signal)",log=T)
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-showreel")
require(shiny)
runApp("C:\\Users\\Kent.TLEAVELL_NT\\Dropbox\\development\\r\\shiny-d3-showreel")
